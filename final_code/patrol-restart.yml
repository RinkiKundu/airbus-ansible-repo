---

- name: Check if host exists in tower inventory

  gather_facts: false

  hosts: localhost
 
  tasks:

    - block:

      - name: "Fail if Extra Variable {{ HOSTS }} does not exist in Ansible Tower's inventory"

        fail:

          msg: "{{ item }} does not exist in Ansible Tower's inventory."

        when: "item not in groups['all']"

        with_items: "{{HOSTS}}"
 
      rescue:

      - name: Failure to get host in tower inventory

        debug:

          msg: "OUTPUT: FAILED:  This target host {{HOSTS}} does not  exist in tower Ansible Inventory"

        failed_when: True

#-----------------------------------------------------------------------------------------------

- name: Playbook check if host is windows

  gather_facts: false

  hosts: "{{ HOSTS }}"

  vars:

    HOSTS:
 
  tasks:

    - block:

      - name: "Fail if Variable ansible_connection is not winrm "

        assert:

          that:

            - ansible_connection == "winrm"

          msg: "Playbook is for Windows not Linux"
 
      rescue:

      - name: Invalid OS for this playbook

        debug:

          msg: "OUTPUT: FAILED: {{ HOSTS }} is a Linux cannot run this playbook"

        failed_when: True
 
#-----------------------------------------------------------------------------------------------

# restart the PatrolAgent service on windows host 

- name: Force windows PatrolAgent service restart

  gather_facts: false

  hosts: "{{ HOSTS }}"

  tasks:

   - block:

     - name: Check service status before restart 

       win_shell:

         Get-Service PatrolAgent

       changed_when: false

       register: statebefore
 
     - name: Display state before restart

       debug:

         msg: "{{ statebefore.stdout }}"
 
     - name: Restart service PatrolAgent

       win_service:

         name: PatrolAgent

         state: restarted

       register: stateafter

     - name: Display state after restart

       debug:

         msg: "{{ stateafter.name }} is {{ stateafter.state }}"
 
     - name: Log output when successful

       debug:

         msg:

          - "OUTPUT: Successful: PatrolAgent running on {{ HOSTS }}"
 
     rescue:

     - name: Log output when failed

       debug:

         msg:

          - "OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed on {{ HOSTS }}: {{ ansible_failed_result.msg }}"

       failed_when: True
