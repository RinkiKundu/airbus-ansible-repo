---
- name: Fetch Incident and Update Incident fields data from ServiceNow
  hosts: localhost
  gather_facts: true

  vars:
    servicenow_instance: "{{ instance_url }}"
    state: "%5Estate%3D1"
    mysql_query: "SELECT alert_name FROM incidentdata.config_table;"
    pat_token: "{{ pat_token }}"
    encoded_search_queries: ""

  tasks:
    - block:
        - name: Print PAT token 
          debug:
            var: pat_token

        # - name: Call the MySQL Query Playbook
        #   include_tasks: mysql_query_playbook.yml
        #   vars:
        #     query: "{{ mysql_query }}"
        #   register: alert_names

        - name: Fetch open SCTASK 
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sc_task?sysparm_query=state%3D1%5EnumberSTARTSWITHSCTASK"
            method: GET
            headers:
              Accept: "application/json"
              #Authorization: "Basic {{ encoded_credentials | string }}"
              Authorization: "Bearer {{ pat_token }}"
            return_content: yes
            force_basic_auth: yes
          register: task_data

        - name: Display task data
          debug:
            var: task_data

        - name: Extract task data
          set_fact:
            extracted_task: "{{ task_data.json.result }}"

        - name: Display Extract task data
          debug:
            var: extracted_task

      #   - name: Initialize a list to store incident numbers
      #     set_fact:
      #       incident_numbers: []
      #       short_Descriptions: []
      #       ci_name: []
      #       description: []
      #       sys_id: []

      #   - name: extract specific field
      #     set_fact:
      #       incident_numbers: "{{ incident_numbers + [item.number] }}"
      #       short_Descriptions: "{{ short_Descriptions + [item.short_description] }}"
      #       description: "{{ description + [item.description] }}"
      #       ci_name: "{{ ci_name + [item.cmdb_ci] }}"
      #       sys_id: "{{ sys_id + [item.sys_id] }}"
      #     loop: "{{ extracted_incidents }}"
      #     when: item.number is defined and item.short_description is defined and item.description is defined and item.cmdb_ci is defined

      #   - name: print
      #     debug:
      #       var: short_Descriptions
            
      #   - name: Extract incident numbers and short descriptions
      #     set_fact:
      #       final_incident_data: "{{ final_incident_data | default([]) + [{'Incident-number': item.number, 'ci_name': item.cmdb_ci, 'short_description': item.short_description, 'description': item.description, 'sys_id': item.sys_id}] }}"
      #     loop: "{{ extracted_incidents }}"
      #     when: item | length > 0 
 
      #   - name: Display final incident data
      #     debug:
      #       var: final_incident_data

      #   - name: call validator template in loop
      #     include_tasks: triggering-template-validator.yml
      #     vars:
      #       incident_data_validator: "{{ item }}"
      #     loop: "{{ final_incident_data }}"
      #     loop_control:
      #       loop_var: item  
  

      # rescue:
      #   # - name: Log Output For Failure
      #   #   debug:
      #   #     msg: "Log : FAILED : Task {{ ansible_failed_task.name }} Failed and the ERROR: {{ ansible_failed_result }}"
      #   #   failed_when: True

      #   - name: set fact ansible_failed_result
      #     set_fact:
      #       ansible_fail_result: "{{ ansible_failed_result.msg  }}"

      #   - name: print ansible_fail
      #     debug:
      #       var: ansible_fail_result 

      #   - name: call logging playbook 
      #     include_tasks: logging.yml
      #     vars:
      #       ansible_failed_results: "{{ ansible_fail_result  }}"



